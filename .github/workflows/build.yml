
name: Build

on:
  push:


jobs:
  build:
    runs-on: docker
    container:
      image: node:23.7
    permissions:
      contents: write
      packages: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare repository
        run: git fetch --unshallow --tags -f

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Create .env.local file
        run: |
          touch apps/app/.env.local

          echo "BETTER_AUTH_SECRET=sk_test_JA==" >> apps/app/.env.local
          echo "BETTER_AUTH_URL=whsec_test" >> apps/app/.env.local

          echo "RESEND_FROM=test@test.com" >> apps/app/.env.local
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/test" >> apps/app/.env.local
          echo "RESEND_TOKEN=re_test" >> apps/app/.env.local
          echo "STRIPE_SECRET_KEY=sk_test" >> apps/app/.env.local
          echo "STRIPE_WEBHOOK_SECRET=whsec_test" >> apps/app/.env.local
          echo "ARCJET_KEY=ajkey_test" >> apps/app/.env.local
          echo "SVIX_TOKEN=testsk_test" >> apps/app/.env.local
          echo "VERCEL_PROJECT_PRODUCTION_URL=http://localhost:3002" >> apps/app/.env.local

          echo "KNOCK_API_KEY=test" >> apps/app/.env.local
          echo "KNOCK_FEED_CHANNEL_ID=test" >> apps/app/.env.local

          echo "NEXT_PUBLIC_BETTER_AUTH_URL=/" >> apps/app/.env.local
          echo "NEXT_PUBLIC_GA_MEASUREMENT_ID=G-test" >> apps/app/.env.local
          echo "NEXT_PUBLIC_UMAMI_WEBSITE_ID=phc_test" >> apps/app/.env.local
          echo "NEXT_PUBLIC_UMAMI_SCRIPT_URL=https://test.com" >> apps/app/.env.local
          echo "NEXT_PUBLIC_APP_URL=http://localhost:3000" >> apps/app/.env.local
          echo "NEXT_PUBLIC_DOCS_URL=http://localhost:3004" >> apps/app/.env.local

      - name: Copy .env.local file
        run: |
          cp apps/app/.env.local apps/api/.env.local

      - name: Create specific Database .env file
        run: |
          touch packages/database/.env
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/test" >> packages/database/.env

      - name: Build with bundle analysis
        run: pnpm analyze

#  tag-version:
#    runs-on: docker
#    needs: build
#    container:
#      image: node:23.7
#    outputs:
#      new_version: ${{ steps.determine_version.outputs.new_version }}
#    permissions:
#      contents: write
#      packages: write
#      pull-requests: write
#      id-token: write

#    if: success() && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'skip ci')
#    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare repository
        run: git fetch --unshallow --tags -f

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@sbrubbles.com"

      - name: Determine next version
        id: determine_version
        run: |
          NEW_VERSION=$(pnpm release:next-version)
          echo "Next version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Tag Version
        run: |
          pnpm release:ci


